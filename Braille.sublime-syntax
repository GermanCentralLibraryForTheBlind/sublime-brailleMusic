%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - txt
  - out
scope: text.braille
variables:
  ## Allgemeine Braille- Zeichen
  # Buchstaben ohne nationale Besonderheiten ("western")
  char_western: '[a-z]'
  # deutsche Vollschriftzeichen (+Umlaute ß au eu äu st sch)
  char_de: '{{char_western}}|[0-5~`98|}]'
  # andere Zeichen mit Punkten 1-3
  other123: '[6\+\?\(\)&7#\*,;/={]'
  digit: '[a-j]'
  lower_digit: '[,;:/\?\+=\(\*\)]'
  number: '#{{digit}}+'
  lower_number: '#{{lower_digit}}+'
  fraction: '{{number}}{{lower_digit}}+'
  bracket: '(?:\.)?''=' #eckige Klammer 
 
  ## musikalisch ########################
  #Schluss, Teilschluss, 
  section: ({{number}}\s)?#{{lower_digit}}+\.?\-{{lower_digit}}+\.?\s
  key: '[123]{,3}'
  key_time: '({{key}})({{fraction}})'
  fermate: "2l"
  
  bar_end: "2k|2k."
  repeat_start: '2='
  repeat_end: '2;'
  staff_prefixes : ('\.|_`|\$\`)
  ## Ornamente
  mordents: '!\+l|<\+L'
  trills: '!?\+|<?\+'
  ornaments: '{{mordents}}|{{trills}}|''/l?|!?\?'
  accents: '\$\(|\('   
  value_diff: '''2,|>2,' #Wertscheidungs- oder Gruppierungszeichen
  octaves : '"(?!c)|>|_|\!|\$|\<|'''
  accidentals: '3{1,2}|2{1,2}|1'
  ## Notes + Rests ################################
  eigth_128 : '[defghij]'
  quarter_64 : '[456789w]'
  half_32 : '[nopqrst]'
  whole_16: '[yz\&\%\{\~\}]'
  # All together
  notes: '{{eigth_128}}|{{quarter_64}}|{{half_32}}|{{whole_16}}'
  rests: '[xvum]'
  ####################

  fingers: a|b|l|,|k
  intervals: '(({{accidentals}})?(\||[0#\*):-])({{fingers}}){,2})'
  phrase_start: '<b'
  phrase_end: '>;'
  tie: '"c'
  bows_after: '>;|cc|{{phrase_end}}|{{tie}}|c'
  # abs. dynamics + cresc./decresc.
  # Es dürfen keine Zeichen folgen, welche die Punkte 1-3 enthalten (Punkt 3 davor)
  dynamics: (sfz|fp|mp|mf|sf|fz|p{1,3}|f{1,3}|c|d)(?!{{char_de}}-`|{{other123}}) 
  dynamics2: (sfz|fp|mp|mf|sf|fz|p{1,3}|f{1,3}|c|d)\s+({{bracket}}?(({{char_de}}|\s)*){{bracket}}?)(?=`)
  # (de)cresc. Winkel
  cresc: '`[cd:/]'
  pedal_on: '2c|12c|!1c|!2c'
  pedal_off: '1c'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: numbers
    - match: '{{lower_number}}'
      scope: constant.numeric.braille

  main:
    - meta_include_prototype: false

    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).

    - include: quoted
    - include: staff
    - include: lyrics
    - include: section
    - include: directive
    # - include: title


  staff:
    - meta_include_prototype: false
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\s*(.*)\s*{{staff_prefixes}}'
      scope: keyword.control.staff.braille
      captures:
        1: storage.modifier.instrument.braille #Instrumentname 
      push: inside_staff
  
  inside_staff: 
    # - meta_scope: keyword.control.braille 
    - meta_include_prototype: false
    #- scope: constant.language.braille
    - match: ^\.   # . if char after music prefix contains points1-3
      scope: comment.escape.braille
    - match: '!:\s' #black print page turn
      scope: comment.page_turn.braille
    # measure starts after first non whitespace char
    - match: (?=\S) #((?:^[^\s]*)(?=\s))|((?:\s)(?=[^\s]*))
      # scope: constant.character.braille
      push: measure
    # exit staff condition
    - match: (?=(\n)|(^\s\s))
      scope: constant.language.staff.end.braille
      pop: true


  measure:
    # voice sign
    - match: '2`'
      scope: invalid.measure.voice.braille
    # line break
    - match: '!$'
      scope: invalid.measure.break.braille
    - match: '{{repeat_start}}'
      scope: comment.bar_repeat_start.braille
    # - match: '{{octaves}}'
    #   scope: support.other.variable
    # barlines
    - match: '({{repeat_end}})?({{bar_end}})?({{fermate}})?'                 #barline/repeats
      captures: 
        1: comment.measure.repeat_end.braille
        2: comment.measure.barline.braille   
        3: comment.measure.fermate.braille   
    # notes incl. prefix (accid., bow_start, ornaments),
    # postfix (finger, slurs, intervals)... TODO(?<!`)
    - match: '({{value_diff}})?({{phrase_start}})?({{ornaments}})?({{accents}}{,2})({{pedal_on}})?''?({{accidentals}})?({{octaves}})?({{notes}})(\.{,2})({{fingers}})?({{bows_after}})?({{intervals}}+)?({{pedal_off}})?'

      scope: entity.note.braille
      captures: 
        1: comment.value_diff.braille
        2: comment.phrase_start.braille
        3: invalid.deprecated.ornament.braille
        4: invalid.deprecated.accent.braille
        5: string.pedal.braille
        6: storage.modifier.accidental.braille
        7: support.other.variable.octave.braille
        8: entity.note.name.braille
        9: entity.dots.braille
        10: variable.note.finger.braille
        11: comment.slur_tie.braille
        12: markup.inserted.interval.braille
        13: markup.inserted.interval.accidental.braille
        14: markup.inserted.interval.interval.braille
        15: markup.inserted.interval.finger.braille
        16: string.inserted.pedal_off.braille
      

    - match: '{{rests}}'
      scope: entity.name.rest.braille    
    - match: '`({{bracket}})?({{dynamics2}}|{{dynamics}})({{bracket}})?'
      scope: punctuation.dynamics.braille
    # directive texts  
    - match: '`({{bracket}})?' #(`.+?(?!{{dynamics}}))
      scope: string.quoted.word.braille
      push: word   #mehrzeilig möglich
    # measure end condition = whitespace or newline 
    - match: \s
      scope: constant.character.end.braille
      pop: true
  
  #Wortzeichen
  word:
    - meta_scope: string.quoted.word.braille
    - match: '({{bracket}})?(?={{octaves}}|[\.`])'
      # scope: constant.language.end.braille
      pop: true

  numbers:
    - match: '#{{digit}}+'
      scope: constant.numeric.braille

  quoted:
    - match: '''\..*''\.'
      scope: punctuation.definition.comment.braille

  directive:
    - match: '(.*)\s+({{key_time}})'
      scope: variable.parameter.directive.braille
      captures: 
        2: constant.numeric.key_time.braille
        3: constant.numeric.key.braille
        4: constant.numeric.time.braille
  section:
    - meta_include_prototype: false
    - match: '{{section}}'
      scope: meta.diff.section.braille 
  title:
    - meta_include_prototype: false
    # match underlines only (?)
    - match: '\s*({{number}}|{{lower_number}}(?=\s+))?(["|\$|>]?({{char_de}}|{{other123}}){1,100}|\s|\-)+' #'\(?\>?\$?[a-z0-9`,~''"\}\*\-\$]+\)?\s' #(:{6,7}|={6,7})
      scope: comment.title.braille
      captures:
        1 : constant.numeric.braille

  lyrics:
    # lyrics start with lyrics prefix
    - match: '\s\s<;'
      scope: keyword.control.lyrics.braille
      push: inside_lyrics

  inside_lyrics:
    # - meta_include_prototype: false
    - meta_scope: string.quoted.double.braille
    # end condition: double space, not next verse
    - match: ^\s\s(?!#)
      scope: punctuation.definition.string.end.braille
      pop: true

  # comments:
  #   # Comments begin with a '//' and finish at the end of the line.
  #   - match: '//'
  #     scope: punctuation.definition.comment.braille
  #     push:
  #       # This is an anonymous context push for brevity.
  #       - meta_scope: comment.line.double-slash.braille
  #       - match: $\n?
  #         pop: true
