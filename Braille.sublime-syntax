%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - brm.txt
  - brm
  - txt
  - out
scope: text.braille
variables:
## Common Braille signs
  # Buchstaben ohne nationale Besonderheiten ("western")
  char_western: '[a-z]'
  # deutsche Basis-/ Vollschriftzeichen (+Umlaute ß au eu äu st sch)
  char_de_base: '{{char_western}}|[~`98]'
  char_de: '{{char_western}}|[0-5~`98\|}]'
  # andere Zeichen mit Punkten 1-3
  other123: '[6\+\?\(\)&7#\*,;/={]'
  digit: '[a-j]'
  lower_digit: '[,;:/\?\+=\(\*\)]'
  number: '#{{digit}}+'
  lower_number: '#{{lower_digit}}+'
  fraction: '{{number}}{{lower_digit}}+'
  bracket: '(?:\.)?''?=' #(eckige)? Klammer 
  paren: '''\.'
  dash: "'-"
########## Braille Music definitions ########################
## Meta Information  
  section: ({{number}}\s)(#{{lower_digit}}+\.?\-{{lower_digit}}+\.?)(?=\s)
  music_prefix: '''\.'
  staff_prefix: (_`|\$`|>`)
  clef: '(?:`(#|\|)(l|k)(#(h|\())?)'
  key: '[123]{1,3}|#{{digit}}[123]'
  c_time: '\$c|_c'  #"C" oder "Alla Breve"
  key_time: '(({{key}})?({{c_time}}|{{fraction}}))|({{key}})(?:\s)|({{key}})$'
  
##Barline, Endings, Repeats 
  bar_end: '2k\.?'
  fermate: '2l'
  repeat_start: '2='
  repeat_end: '2;'
  volta_1: '#,'
  volta_2: '#;'
  goback_repeat: '({{number}}){1,2}'
  measure_repeat: '=({{number}})?'
## Tuples
  triplet: ';;?'


## Ornaments + Accents
  mordent: '!\+l|<\+L'
  trill: '!?\+|<?\+'
  grace: '!?\?'
  ornament: '{{mordent}}|{{trill}}|''/l?|{{grace}}'
  # marc.||ten.||mezzostacc.||martellato||stacc....
  accent: '(?:{{paren}})?(?:[\$_!''<])?\((?:{{paren}})?'   
  value_sign: '''2,|>2,' #Wertscheidungs- oder Gruppierungszeichen
  octave : '"(?!c)|>|_|\!|\$|\<|'''
  accidental: '(?:{{paren}})?(?:'')?(?:3{1,2}|2{1,2}|1)(?:{{paren}})?'
## Notes + Rests ################################
  eigth_128 : '[defghij]'
  quarter_64 : '[456789w]'
  half_32 : '[nopqrst]'
  whole_16: '[yz\&\%\{\~\}]'
  # All together
  note: '{{eigth_128}}|{{quarter_64}}|{{half_32}}|{{whole_16}}'
  rest: '[xvum]'

## note_prefix
  note_prefix: ({{value_sign}})?({{phrase_start}})?({{ornament}})?({{pedal_on}})?((?:{{accent}})+)?''?({{accidental}})?(?:({{octave}}){,2})?

## Slurs, ties, phrases
  tie: '_?"c'
  chord_tie: '\$c'                    #Arp.  Akk.
  bow_after: '''\.cc?''\.|''?cc|{{tie}}|{{chord_tie}}|>c|<c|''?c|!cc?'
  slur_start: '(?:''|>)?cc|c'
  phrase_start: '<b'
  phrase_end: '>;'
## Fingering
  finger: '[abl,k]'
  change_finger: '{{finger}}c{{finger}}'
  interval: '(?:(?:{{accidental}})?(?:\||[0#\*\):\-])(?:{{finger}}){,2}(?:{{bow_after}}){,2})'
## Dynamics and other word sign stuff
  # Es dürfen keine Zeichen folgen, welche die Punkte 1-3 enthalten (Punkt 3 davor)
  dynamics: (sfz|fp|mp|mf|sf|fz|p{1,3}|f{1,3}|c|d)(?!{{char_de}}-`|{{other123}}) 
  # Abs. Dynamik mit Anweisung als Text dahinter
  dynamics2: (sfz|fp|mp|mf|sf|fz|p{1,3}|f{1,3}|c|d)\s+({{bracket}}?(({{char_de}}|\s)*){{bracket}}?)(?=`\s)
  # (de)cresc. Winkel
  cresc: '`[cd:/]'
  cresc_end: '`:'
  decresc_end: '`/'
  # Chord Symbols
  chord_symbol: '`\$[cdefgab]([32])?(m|maj|dim)?'

## Piano Sustain Pedal
  # Ped.|*Ped.|Ped. nach Akk.los|Halbped.
  pedal_on: '!?2c|12c|!1c'
  pedal_off: '1c' 
## Stimmzeichen: Ganztakt|Teilstimme|Teiltakt
  voice_sign: '2`|!,|\$k'
 # Einklangzeichen 
  one_tune: '_[\.kabl,]'


contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: numbers
    - match: '{{lower_number}}'
      scope: constant.numeric.braille

  main:
    - meta_include_prototype: false

    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).

    #- include: quoted
    - include: staff
    - include: lyrics
    - include: section
    - include: directive
    - include: footnote
    # - include: title


  staff:
    - meta_include_prototype: false
    # - meta_scope: sublimelinter.mark.error.staff.braille 
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
#TODO!!!! set anstelle von push für octave oder . (sonst mark.error.braille)
    - match: '(?:({{char_de}}|\.)+(?:\s+))?(?:{{music_prefix}})({{clef}})?(?!{{note}}|\s)'
    #(?={{octave}}|{{rest}}|`|#|{{accidental}}|{{note_prefix}}) 
      scope: keyword.control.staff.start.braille
      captures:
        1: storage.modifier.instrument.braille
        2: keyword.control.staff_prefix.braille 
        3: keyword.control.clef.braille 
      push: inside_staff

    - match: '(?:({{char_de}}|\.)+)?(?:\s+)(?:{{staff_prefix}})({{clef}})?(?={{octave}}|(?:\.|`)|")' 
      scope: keyword.control.staff.start.braille
      captures:
        1: storage.modifier.instrument.braille
        2: keyword.control.staff_prefix.braille 
        3: keyword.control.clef.braille 
      push: inside_staff
  
  inside_staff: 
    - meta_scope: sublimelinter.mark.error.staff.braille 
    - meta_include_prototype: false
## short music    
    - match: ('\.)
      scope: constant.language.staff.end.braille
      pop: true
    - match: '\.'
      scope: comment.escape.braille
    # . if char after music prefix contains points 1-3
    
    - match: '!:(?:\s)' #black print page turn
      scope: comment.page_turn.braille
    # inmeasure simile at measure start forbidden
    - match: '=(?!({{number}}|({{bow_after}}){,2})|\s|=)'
      scope: invalid.simile.braille
      pop: true

    #full measure simile
    - match: '(?=({{pedal_on}})?({{octave}})?{{measure_repeat}}({{bow_after}}){,2}({{repeat_end}})?({{bar_end}})?\s)'
      scope: comment.measure.repeat.braille
      push: whole_measure_simile
    # else: measure starts after first non whitespace char
    - match: (?=\S) #((?:^[^\s]*)(?=\s))|((?:\s)(?=[^\s]*))
      # scope: constant.character.braille
      push: measure
    # exit staff condition
    - match: (?=(\n)|(^\s\s))|('\.)
      scope: constant.language.staff.end.braille
      pop: true
  
  in_measure_simile:
    - include: simile    
    - match: (?=\s)
      scope: constant.measure.end.braille
      pop: true
    - match: \1
      pop: true
    
  simile:
    - match: '{{pedal_on}}'
      scope: comment.pedal.start.braille
    - match: '{{bow_after}}'
      scope: comment.slur_tie.braille
    - match: \.
      scope: storage.modifier.repeat.seperator.braille
   
  whole_measure_simile: 
    - meta_scope: comment.measure.repeat.braille
    - include: simile    
 #whole measure simile end
    - match: \s
      scope: constant.measure.end.braille
      pop: true

  measure:
    - meta_include_prototype: false
    - meta_scope: constant.language.measure.braille
    # key/time
    - match: '{{key_time}}'
      scope: constant.numeric.key_time.braille
    # voice sign
    - match: '{{voice_sign}}'
      scope: invalid.measure.voice.braille
    - match:  '`\?\*'
      scope: comment.footnote.braille

    # line break
    - match: '!$'
      scope: invalid.measure.break.braille
    - match: '!(?=\s)'
      scope: invalid.measure.separator.braille
    # repeats
    - match: '({{volta_1}}|{{volta_2}})\.?'
      scope: comment.volta.braille
    - match: '{{repeat_start}}'
      scope: comment.bar_repeat.start.braille 
    - match: '{{number}}m'
      scope: comment.whole_rest.repeat.braille
    - match: '((?:{{pedal_on}})?{{goback_repeat}}(?={{repeat_end}})?(?={{bar_end}})?)'
      scope: comment.goback.repeat.braille
    - match: '(?:(?:{{pedal_on}})?(?:{{measure_repeat}})(?:{{bow_after}}{,2})?)'
      scope: comment.inmeasure.repeat.braille
      push: in_measure_simile
      # captures:
      #   1: comment.pedal.start.braille
      #   2: comment.slur_tie.braille
      #   3: comment.repeat.end.braille
      #   4: comment.bar.end.braille
    # segno, coda
    - match: '0l'
      scope: comment.coda.braille
    - match: '0'
      scope: comment.segno.braille
    - match: '{{cresc_end}}'
      scope: punctuation.crescendo.end.braille
    - match: '{{decresc_end}}'
      scope: punctuation.decrescendo.end.braille
    - match: '{{phrase_start}}'
      scope: comment.phrase.start.braille  
    - match: '{{phrase_end}}'
      scope: comment.phrase.end.braille  
    # barlines
    - match: '(`?{{repeat_end}})?({{bar_end}})?({{fermate}})?'                 #barline/repeats
      captures: 
        1: comment.measure.repeat_end.braille
        2: comment.measure.barline.braille   
        3: comment.measure.fermate.braille   
    # notes incl. prefix (accid., bow_start, ornaments),
    # postfix (finger, slurs, intervals)... TODO(?<!`)
    # TODO: make multiple occur. items non capturing or push
    - match: '(?x:({{value_sign}})?({{triplet}})?({{phrase_start}})?
      ({{ornament}})?({{pedal_on}})?((?:{{accent}})+)?
      ''?({{accidental}})?
      (?:({{octave}}){,2})?({{note}})(\.{,2})
      ((?:{{change_finger}}|{{finger}})+)?
      ((?:{{bow_after}}){,2})?((?:{{interval}})+)?
      ({{fermate}})?({{phrase_end}})?
      ((?:{{paren}})?(?:{{pedal_off}})(?:{{paren}})?)?)'
      scope: entity.name.note.braille
      captures: 
        1: comment.value_sign.braille
        2: comment.triplet.braille
        3: comment.phrase_start.braille
        4: invalid.deprecated.ornament.braille
        # 5: invalid.deprecated.accent.braille
        5: string.pedal.braille
        6: invalid.deprecated.accents.braille
        7: storage.accidental.braille
        8: support.class.octave.braille
        9: entity.name.note_name.braille
        10: entity.dots.braille
        11: variable.note.finger.braille
        12: comment.slur_tie.braille
        13: markup.inserted.interval.braille
        14: comment.fermate.braille
        15: comment.phrase.end.braille
        # 12: markup.inserted.interval.accidental.braille
        # 13: markup.inserted.interval.interval.braille
        # 17: markup.inserted.interval.finger.braille
        16: string.inserted.pedal_off.braille
      

    - match: '({{value_sign}})?({{triplet}})?{{rest}}(\.{,2})'
      scope: entity.name.rest.braille
      captures:
        1: comment.value_sign.braille
        2: comment.triplet.braille
        3: entity.dots.braille  
    - match: '({{ornament}})?({{pedal_on}})?((?:{{accent}})+)?''?({{accidental}})?({{octave}})?({{one_tune}})(\.{,2})((?:{{finger}})+)?((?:{{bow_after}}){,2})?'    
      scope: variable.one_tune.braille
    - match: '`({{bracket}})?({{dynamics2}}|{{dynamics}})({{bracket}})?'
      scope: punctuation.dynamics.braille
    - match: '`k{1,2}' #(?!{{char_de}}-`|{{other123}})
      scope: punctuation.arpeggio.braille

    - match: '{{chord_symbol}}'
      scope: punctuation.chord_symbol.braille
      # push: 
      #   - match: '\1(\.)?'
      #     captures:
      #       1: punctuation.dynamics.end.braille
      #     pop: true

    # directive texts  
    - match: '(`(?!{{bar_end}})({{dash}}|{{bracket}})?(>?#{{digit}}|#{{lower_digit}}|{{char_de_base}}-`|=|\.)+\.?)'
         #'`({{bracket}})?(({{char_de}}-`)|\s|\.)+{{bracket}}?'
    
      scope: string.quoted.word.braille
      # can be multiline-> push!
      push: word   
    # measure end condition = whitespace or newline 
    - match: \s|(?=.'\.)
      scope: constant.measure.end.braille
      pop: true
  
  #Wortzeichen
  word:
    - meta_scope: string.quoted.word.braille
    - match: ((#{{digit}}|#{{lower_digit}}|{{char_de_base}}-`|\s|(\.\s))*(({{dash}})|({{bracket}}))?(?=\.\(|(`\s|`2k|2k|{{octave}}))) 
      # scope: constant.language.end.braille
      pop: true

  numbers:
    - match: '#{{digit}}+'
      scope: constant.numeric.braille
  paren:
    - match: '''\.'
      push:
        - match: '''\.'
          pop: true  

  quoted:
    - match: '''\..*''\.'
      scope: punctuation.definition.comment.braille

  directive:
    # Rhythm directive like note=ca.bpm
    - match: '(?:\s)({{note}})=(ca.)?({{number}})(?=\s)'
      scope: constant.language.rhythm.braille
      captures:
        1: constant.language.rhythm.note.braille
        2: constant.language.rhythm.circa.braille
        3: constant.language.rhythm.bpm.braille
    # Key and Time
    - match: '(?:\s\s){{key_time}}(?:\s)'
      scope: variable.parameter.directive.braille
      captures: 
        1: constant.numeric.key_time.braille
        2: constant.numeric.key.braille
        3: constant.numeric.time.braille
        4: constant.numeric.key.braille
        5: constant.numeric.key.braille
    # - match: '(^\s{4})(({{char_de}}|,)*(?=\s)){1,4}'
    #   scope: constant.language.directive.braille
    #- match: '^(\s)*(?:\s)({{char_de}})+(?:\s)'
    #  push:
    #    - match: \1\s+(?={{section}})
    #      scope: constant.language.directive.braille
    #      pop: true

## Footnote text below score  
  footnote:
    - match: '\s{5}`\?\*\s\S.*'
      scope: comment.footnote.braille
      set:
        - match: '^(\s{4}\S.*)'
          scope: comment.footnote.braille
        - match: '^(?!\s{4}\S)'
          pop: true

  section:
    - meta_include_prototype: false
    - match: '{{section}}'
      scope: meta.diff.section.braille 
      captures:
        1: meta.diff.section.number.braille
        2: meta.diff.section.measure_range.braille
  title:
    - meta_include_prototype: false
    # match underlines only (?)
    - match: '\s*({{number}}|{{lower_number}}(?=\s+))?(["|\$|>]?({{char_de}}|{{other123}}){1,100}|\s|\-)+' #'\(?\>?\$?[a-z0-9`,~''"\}\*\-\$]+\)?\s' #(:{6,7}|={6,7})
      scope: comment.title.braille
      captures:
        1 : constant.numeric.braille

  lyrics:
    # lyrics start with lyrics prefix
    - match: '\s\s<;'
      scope: keyword.control.lyrics.braille
      push: inside_lyrics

  inside_lyrics:
    - meta_scope: string.lyrics.braille
    # - meta_include_prototype: false
    # Lyrics repeats
    - match: '\*{1,2}'
      scope: comment.lyrics.repeat.braille
      push:
        - match: '\(.*\)'
        # mehrere Silben auf einer Note
          scope: variable.lyrics.melisma.braille
        - match: '\*{1,2}'
          scope: comment.lyrics.repeat.braille
          pop: true

    - match: '\(.*\)'
      scope: variable.lyrics.melisma.braille
 # exit condition: double space, not next verse
    - match: (?=(^\s\s(?!#))|'\.)
      scope: punctuation.definition.string.end.braille
      pop: true

  