%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - txt
  - out
scope: text.braille
variables:
  numbers: ([a-j])
  lower_numbers: ([,;:/\?\+=\(\*\)])
  staff_prefixes : ('\.|_`|\$\`)
  #Ornamente
  mordents: '!\+l|<+L'
  trills: '!?\+|<?\+'
  ornaments: '{{mordents}}|{{trills}}|''/l?|!?\?'   
  octaves : '"(?!c)|>|_|!|\$|\<|'''
  accidentals: '''?3{1,2}|2{1,2}|1'
  # Notes
  eigth_128 : d|e|f|g|h|i|j
  quarter_64 : 4|5|6|7|8|9|w
  half_32 : n|o|p|q|r|s|t
  whole_16: y|z|&|%|\{|~|\}

  value_diff: '''2,|>2,' #Wertscheidungszeichen
  notes: '{{eigth_128}}|{{quarter_64}}|{{half_32}}|{{whole_16}}|'
  rests: x|v|u|m
  fingers: a|b|l|,|k

  dynamics: (sfz|fp|mp|mf|sf|fz|p{1,3}|f{1,3})

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: numbers

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: staff
    - include: lyrics
    - include: title
    # - include: numbers
    - include: directive

  staff:
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\s*(.*)\s*{{staff_prefixes}}'
      scope: keyword.control.braille
      captures:
        1: storage.modifier #Instrumentname 
      push: inside_staff
  
  inside_staff:
    # - meta_include_prototype: false
    - meta_scope: constant.language.braille
    - match: ^\.   # . if char after music prefix contains points1-3
      scope: punctuation.definition.comment.braille
    - match: '!:\s' #black print page turn
      scope: punctuation.definition.comment.braille
    # measure starts after first non whitespace char
    - match: (?=\S) #((?:^[^\s]*)(?=\s))|((?:\s)(?=[^\s]*))
      # scope: constant.character.braille
      push: measure
    # exit staff condition
    - match: (?=(\n)|(^\s\s))
      scope: constant.language.end.braille
      pop: true


  measure:
    # voice sign
    - match: '2`'
      scope: invalid.braille
    # line break
    - match: '!$'
      scope: invalid.braille
    
    # - match: '{{octaves}}'
    #   scope: support.other.variable
    # barlines
    - match: '\s(2=)|2;|2k|2l|2k\.!?'                 #barline/repeats
      scope: punctuation.definition.comment.braille   
    # notes incl. prefix (accid.), postfix (finger)... TODO
    - match: '(?<!`)({{ornaments}})?({{accidentals}})?({{octaves}})?({{notes}})\.?({{fingers}})?'
      scope: entity.braille
      captures: 
        1: invalid.deprecated
        2: storage.modifier
        3: support.other.variable
        4: entity.braille
        5: variable.parameter.braille
    - match: '{{rests}}'
      scope: entity.name.tag.braille    
    - match: '`{{dynamics}}'
      scope: punctuation.braille
    # directive texts  
    - match: (`.+?(?!{{dynamics}})(?={{octaves}}|[.`]))
      scope: punctuation.braille   
    # measure end condition = whitespace or newline 
    - match: \s
      scope: constant.character.end.braille
      pop: true

  numbers:
    - match: '#[{{numbers}}|{{lower_numbers}}]{1,2}'
      scope: constant.numeric.braille
  
  directive:
    - match: '(.*)\s+#[a-j][,;:/?+=*)]'
      scope: variable.parameter.braille
  
  title:
    # match underlines only (?)
    - match: '\(?\>?\$?[a-z0-9`,~''\}\*\-\$]+\)?\s' #(:{6,7}|={6,7})
      scope: punctuation.definition.comment.braille

  lyrics:
    # lyrics start with lyrics prefix
    - match: '\s\s<;'
      scope: keyword.control..braille
      push: inside_lyrics

  inside_lyrics:
    # - meta_include_prototype: false
    - meta_scope: string.quoted.double.braille
    # end condition: double space, not next verse
    - match: ^\s\s(?!#)
      scope: punctuation.definition.string.end.braille
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '//'
      scope: punctuation.definition.comment.braille
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.braille
        - match: $\n?
          pop: true
